{"version":3,"sources":["NewComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NewComponent","currentMoney","onclickFilterHandler","map","objFromMoneyArr","index","key","banknotes","value","number","style","marginLeft","onClick","App","useState","money","filter","setFilter","filteredMoney","nameButton","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8QAeaA,G,MAAe,SAAC,GAAiE,IAAhEC,EAA+D,EAA/DA,aAAcC,EAAiD,EAAjDA,qBAExC,OACI,oCACI,4BACKD,EAAaE,KAAI,SAACC,EAAiBC,GAChC,OACI,wBAAIC,IAAKD,GACL,8BAAOD,EAAgBG,WACvB,8BAAOH,EAAgBI,OACvB,8BAAOJ,EAAgBK,aAIvC,yBAAKC,MAAO,CAACC,WAAY,SACrB,4BAAQC,QAAS,kBAAMV,EAAqB,SAA5C,OACA,4BAAQU,QAAS,kBAAMV,EAAqB,YAA5C,UACA,4BAAQU,QAAS,kBAAMV,EAAqB,aAA5C,eCGDW,MA7Bf,WAEI,MAA0BC,mBAAS,CAC/B,CAACP,UAAW,UAAWC,MAAO,IAAKC,OAAQ,gBAC3C,CAACF,UAAW,UAAWC,MAAO,GAAIC,OAAQ,gBAC1C,CAACF,UAAW,SAAUC,MAAO,IAAKC,OAAQ,gBAC1C,CAACF,UAAW,UAAWC,MAAO,IAAKC,OAAQ,gBAC3C,CAACF,UAAW,UAAWC,MAAO,GAAIC,OAAQ,gBAC1C,CAACF,UAAW,SAAUC,MAAO,IAAKC,OAAQ,gBAC1C,CAACF,UAAW,UAAWC,MAAO,GAAIC,OAAQ,gBAC1C,CAACF,UAAW,SAAUC,MAAO,GAAIC,OAAQ,kBAR7C,mBAAOM,EAAP,KAUA,GAVA,KAU4BD,mBAAqB,QAAjD,mBAAOE,EAAP,KAAeC,EAAf,KACIhB,EAAec,EAWnB,MAVe,WAAXC,IACAf,EAAec,EAAMC,QAAO,SAACE,GAAD,MAA+C,WAA5BA,EAAcX,cAElD,YAAXS,IACAf,EAAec,EAAMC,QAAO,SAACE,GAAD,MAA+C,YAA5BA,EAAcX,cAO7D,kBAAC,EAAD,CAAcN,aAAcA,EAAcC,qBAJjB,SAACiB,GAC1BF,EAAUE,OChBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7a2507d4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ntype FilterType = 'all' | 'RUBLES' | 'Dollars'\r\n\r\ntype NewComponentPropsType = {\r\n    currentMoney: Array<InArrayCurrentMoney>\r\n    onclickFilterHandler: (nameButton: FilterType) => void\r\n}\r\ntype InArrayCurrentMoney = {\r\n    banknotes: string,\r\n    value: number,\r\n    number: string\r\n}\r\n\r\n\r\nexport const NewComponent = ({currentMoney, onclickFilterHandler}: NewComponentPropsType) => {\r\n\r\n    return (\r\n        <>\r\n            <ul>\r\n                {currentMoney.map((objFromMoneyArr, index) => {\r\n                    return (\r\n                        <li key={index}>\r\n                            <span>{objFromMoneyArr.banknotes}</span>\r\n                            <span>{objFromMoneyArr.value}</span>\r\n                            <span>{objFromMoneyArr.number}</span>\r\n                        </li>)\r\n                })}\r\n            </ul>\r\n            <div style={{marginLeft: '40px'}}>\r\n                <button onClick={() => onclickFilterHandler('all')}>all</button>\r\n                <button onClick={() => onclickFilterHandler('RUBLES')}>RUBLES</button>\r\n                <button onClick={() => onclickFilterHandler('Dollars')}>Dollars</button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {NewComponent} from './NewComponent';\r\n\r\ntype FilterType = 'all' | 'RUBLES' | 'Dollars'\r\n\r\nfunction App() {\r\n\r\n    const [money, setMoney] = useState([\r\n        {banknotes: 'Dollars', value: 100, number: ' a1234567890'},\r\n        {banknotes: 'Dollars', value: 50, number: ' z1234567890'},\r\n        {banknotes: 'RUBLES', value: 100, number: ' w1234567890'},\r\n        {banknotes: 'Dollars', value: 100, number: ' e1234567890'},\r\n        {banknotes: 'Dollars', value: 50, number: ' c1234567890'},\r\n        {banknotes: 'RUBLES', value: 100, number: ' r1234567890'},\r\n        {banknotes: 'Dollars', value: 50, number: ' x1234567890'},\r\n        {banknotes: 'RUBLES', value: 50, number: ' v1234567890'},\r\n    ])\r\n    const [filter, setFilter] = useState<FilterType>('all')\r\n    let currentMoney = money;\r\n    if (filter === 'RUBLES') {\r\n        currentMoney = money.filter((filteredMoney) => filteredMoney.banknotes === 'RUBLES')\r\n    }\r\n    if (filter === 'Dollars') {\r\n        currentMoney = money.filter((filteredMoney) => filteredMoney.banknotes === 'Dollars')\r\n    }\r\n\r\n    const onclickFilterHandler = (nameButton: FilterType) => {\r\n        setFilter(nameButton)\r\n    }\r\n    return (\r\n        <NewComponent currentMoney={currentMoney} onclickFilterHandler={onclickFilterHandler}/>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}